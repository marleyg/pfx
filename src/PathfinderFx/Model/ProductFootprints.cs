// <auto-generated />
//
// To parse this JSON data, add NuGet 'System.Text.Json' then do:
//
//    using PathfinderFx.Model;
//
//    var productFootprints = ProductFootprints.FromJson(jsonString);
#nullable enable
#pragma warning disable CS8618
#pragma warning disable CS8601
#pragma warning disable CS8603

namespace PathfinderFx.Model
{
    using System;
    using System.Collections.Generic;

    using System.Text.Json;
    using System.Text.Json.Serialization;
    using System.Globalization;

    public partial class ProductFootprints
    {
        [JsonPropertyName("data")]
        public System.Collections.Generic.List<Datum> Data { get; set; }
    }

    public partial class Datum
    {
        [JsonPropertyName("id")]
        public Guid Id { get; set; }

        [JsonPropertyName("specVersion")]
        public string SpecVersion { get; set; }

        [JsonPropertyName("version")]
        public long Version { get; set; }

        [JsonPropertyName("created")]
        public DateTimeOffset Created { get; set; }

        [JsonPropertyName("updated")]
        public string Updated { get; set; }

        [JsonPropertyName("companyName")]
        public string CompanyName { get; set; }

        [JsonPropertyName("companyIds")]
        public System.Collections.Generic.List<string> CompanyIds { get; set; }

        [JsonPropertyName("productDescription")]
        public string ProductDescription { get; set; }

        [JsonPropertyName("productIds")]
        public System.Collections.Generic.List<string> ProductIds { get; set; }

        [JsonPropertyName("productCategoryCpc")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long ProductCategoryCpc { get; set; }

        [JsonPropertyName("productNameCompany")]
        public string ProductNameCompany { get; set; }

        [JsonPropertyName("comment")]
        public string Comment { get; set; }

        [JsonPropertyName("pcf")]
        public Pcf Pcf { get; set; }

        [JsonPropertyName("extensions")]
        public System.Collections.Generic.List<Extension> Extensions { get; set; }
    }

    public partial class Extension
    {
        [JsonPropertyName("specVersion")]
        public string SpecVersion { get; set; }

        [JsonPropertyName("dataSchema")]
        public Uri DataSchema { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("documentation")]
        public Uri Documentation { get; set; }

        [JsonPropertyName("data")]
        public Data Data { get; set; }
    }

    public partial class Data
    {
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("shipmentId")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long? ShipmentId { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("consignmentId")]
        public string ConsignmentId { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("shipmentType")]
        public string ShipmentType { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("weight")]
        public long? Weight { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("transportChainElementId")]
        public string TransportChainElementId { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("primaryDataShareScope2")]
        public double? PrimaryDataShareScope2 { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("primaryDataShareScope3")]
        public double? PrimaryDataShareScope3 { get; set; }
    }

    public partial class Pcf
    {
        [JsonPropertyName("declaredUnit")]
        public string DeclaredUnit { get; set; }

        [JsonPropertyName("unitaryProductAmount")]
        public string UnitaryProductAmount { get; set; }

        [JsonPropertyName("pCfExcludingBiogenic")]
        public string PCfExcludingBiogenic { get; set; }

        [JsonPropertyName("pCfIncludingBiogenic")]
        public string PCfIncludingBiogenic { get; set; }

        [JsonPropertyName("fossilGhgEmissions")]
        public string FossilGhgEmissions { get; set; }

        [JsonPropertyName("fossilCarbonContent")]
        public string FossilCarbonContent { get; set; }

        [JsonPropertyName("biogenicEmissions")]
        public BiogenicEmissions BiogenicEmissions { get; set; }

        [JsonPropertyName("biogenicCarbonContent")]
        public string BiogenicCarbonContent { get; set; }

        [JsonPropertyName("biogenicCarbonWithdrawal")]
        public string BiogenicCarbonWithdrawal { get; set; }

        [JsonPropertyName("characterizationFactors")]
        public string CharacterizationFactors { get; set; }

        [JsonPropertyName("biogenicAccountingMethodology")]
        public string BiogenicAccountingMethodology { get; set; }

        [JsonPropertyName("reportingPeriodStart")]
        public DateTimeOffset ReportingPeriodStart { get; set; }

        [JsonPropertyName("reportingPeriodEnd")]
        public DateTimeOffset ReportingPeriodEnd { get; set; }

        [JsonPropertyName("geographyCountrySubdivision")]
        public string GeographyCountrySubdivision { get; set; }

        [JsonPropertyName("geography_country")]
        public string GeographyCountry { get; set; }

        [JsonPropertyName("geographyRegionOrSubregion")]
        public string GeographyRegionOrSubregion { get; set; }

        [JsonPropertyName("primaryDataShare")]
        public double PrimaryDataShare { get; set; }

        [JsonPropertyName("emissionFactorSources")]
        public System.Collections.Generic.List<EmissionFactorSource> EmissionFactorSources { get; set; }

        [JsonPropertyName("boundaryProcessesDescription")]
        public string BoundaryProcessesDescription { get; set; }

        [JsonPropertyName("exemptedEmissionsPercent")]
        public long ExemptedEmissionsPercent { get; set; }

        [JsonPropertyName("exemptedEmissionsDescription")]
        public string ExemptedEmissionsDescription { get; set; }

        [JsonPropertyName("packagingEmissionsIncluded")]
        public bool PackagingEmissionsIncluded { get; set; }

        [JsonPropertyName("packagingGhgEmissions")]
        public string PackagingGhgEmissions { get; set; }

        [JsonPropertyName("crossSectoralStandardsUsed")]
        public System.Collections.Generic.List<string> CrossSectoralStandardsUsed { get; set; }

        [JsonPropertyName("productOrSectorSpecificRules")]
        public System.Collections.Generic.List<ProductOrSectorSpecificRule> ProductOrSectorSpecificRules { get; set; }

        [JsonPropertyName("allocationRulesDescription")]
        public string AllocationRulesDescription { get; set; }

        [JsonPropertyName("uncertaintyAssessmentDescription")]
        public string UncertaintyAssessmentDescription { get; set; }

        [JsonPropertyName("dqi")]
        public Dqi Dqi { get; set; }

        [JsonPropertyName("assurance")]
        public Assurance Assurance { get; set; }
    }

    public partial class Assurance
    {
        [JsonPropertyName("coverage")]
        public string Coverage { get; set; }

        [JsonPropertyName("level")]
        public string Level { get; set; }

        [JsonPropertyName("boundary")]
        public string Boundary { get; set; }

        [JsonPropertyName("providerName")]
        public string ProviderName { get; set; }

        [JsonPropertyName("completedAt")]
        public DateTimeOffset CompletedAt { get; set; }

        [JsonPropertyName("standard")]
        public string Standard { get; set; }

        [JsonPropertyName("statementOrSignature")]
        public StatementOrSignature StatementOrSignature { get; set; }

        [JsonPropertyName("comments")]
        public string Comments { get; set; }
    }

    public partial class StatementOrSignature
    {
        [JsonPropertyName("type")]
        public string Type { get; set; }

        [JsonPropertyName("value")]
        public string Value { get; set; }
    }

    public partial class BiogenicEmissions
    {
        [JsonPropertyName("landUseEmissions")]
        public string LandUseEmissions { get; set; }

        [JsonPropertyName("iLucGhgEmissions")]
        public string ILucGhgEmissions { get; set; }

        [JsonPropertyName("dLucGhgEmissions")]
        public string DLucGhgEmissions { get; set; }

        [JsonPropertyName("otherGhgEmissions")]
        public string OtherGhgEmissions { get; set; }
    }

    public partial class Dqi
    {
        [JsonPropertyName("coveragePercent")]
        public long CoveragePercent { get; set; }

        [JsonPropertyName("technologicalDQR")]
        public double TechnologicalDqr { get; set; }

        [JsonPropertyName("temporalDQR")]
        public double TemporalDqr { get; set; }

        [JsonPropertyName("geographicalDQR")]
        public long GeographicalDqr { get; set; }

        [JsonPropertyName("completenessDQR")]
        public double CompletenessDqr { get; set; }

        [JsonPropertyName("reliabilityDQR")]
        public double ReliabilityDqr { get; set; }
    }

    public partial class EmissionFactorSource
    {
        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("version")]
        public string Version { get; set; }
    }

    public partial class ProductOrSectorSpecificRule
    {
        [JsonPropertyName("operator")]
        public string Operator { get; set; }

        [JsonPropertyName("ruleNames")]
        public System.Collections.Generic.List<string> RuleNames { get; set; }
    }

    public partial class ProductFootprints
    {
        public static ProductFootprints FromJson(string json) => JsonSerializer.Deserialize<ProductFootprints>(json, PathfinderFx.Model.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this ProductFootprints self) => JsonSerializer.Serialize(self, PathfinderFx.Model.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerOptions Settings = new(JsonSerializerDefaults.General)
        {
            Converters =
            {
                new DateOnlyConverter(),
                new TimeOnlyConverter(),
                IsoDateTimeOffsetConverter.Singleton
            },
        };
    }

    internal class ParseStringConverter : JsonConverter<long>
    {
        public override bool CanConvert(Type t) => t == typeof(long);

        public override long Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetString();
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void Write(Utf8JsonWriter writer, long value, JsonSerializerOptions options)
        {
            JsonSerializer.Serialize(writer, value.ToString(), options);
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
    
    public class DateOnlyConverter : JsonConverter<DateOnly>
    {
        private readonly string serializationFormat;
        public DateOnlyConverter() : this(null) { }

        public DateOnlyConverter(string? serializationFormat)
        {
            this.serializationFormat = serializationFormat ?? "yyyy-MM-dd";
        }

        public override DateOnly Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetString();
            return DateOnly.Parse(value!);
        }

        public override void Write(Utf8JsonWriter writer, DateOnly value, JsonSerializerOptions options)
            => writer.WriteStringValue(value.ToString(serializationFormat));
    }

    public class TimeOnlyConverter : JsonConverter<TimeOnly>
    {
        private readonly string serializationFormat;

        public TimeOnlyConverter() : this(null) { }

        public TimeOnlyConverter(string? serializationFormat)
        {
            this.serializationFormat = serializationFormat ?? "HH:mm:ss.fff";
        }

        public override TimeOnly Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetString();
            return TimeOnly.Parse(value!);
        }

        public override void Write(Utf8JsonWriter writer, TimeOnly value, JsonSerializerOptions options)
            => writer.WriteStringValue(value.ToString(serializationFormat));
    }

    internal class IsoDateTimeOffsetConverter : JsonConverter<DateTimeOffset>
    {
        public override bool CanConvert(Type t) => t == typeof(DateTimeOffset);

        private const string DefaultDateTimeFormat = "yyyy'-'MM'-'dd'T'HH':'mm':'ss.FFFFFFFK";

        private DateTimeStyles _dateTimeStyles = DateTimeStyles.RoundtripKind;
        private string? _dateTimeFormat;
        private CultureInfo? _culture;

        public DateTimeStyles DateTimeStyles
        {
            get => _dateTimeStyles;
            set => _dateTimeStyles = value;
        }

        public string? DateTimeFormat
        {
            get => _dateTimeFormat ?? string.Empty;
            set => _dateTimeFormat = (string.IsNullOrEmpty(value)) ? null : value;
        }

        public CultureInfo Culture
        {
            get => _culture ?? CultureInfo.CurrentCulture;
            set => _culture = value;
        }

        public override void Write(Utf8JsonWriter writer, DateTimeOffset value, JsonSerializerOptions options)
        {
            string text;


            if ((_dateTimeStyles & DateTimeStyles.AdjustToUniversal) == DateTimeStyles.AdjustToUniversal
                || (_dateTimeStyles & DateTimeStyles.AssumeUniversal) == DateTimeStyles.AssumeUniversal)
            {
                value = value.ToUniversalTime();
            }

            text = value.ToString(_dateTimeFormat ?? DefaultDateTimeFormat, Culture);

            writer.WriteStringValue(text);
        }

        public override DateTimeOffset Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? dateText = reader.GetString();

            if (string.IsNullOrEmpty(dateText) == false)
            {
                if (!string.IsNullOrEmpty(_dateTimeFormat))
                {
                    return DateTimeOffset.ParseExact(dateText, _dateTimeFormat, Culture, _dateTimeStyles);
                }
                else
                {
                    return DateTimeOffset.Parse(dateText, Culture, _dateTimeStyles);
                }
            }
            else
            {
                return default(DateTimeOffset);
            }
        }


        public static readonly IsoDateTimeOffsetConverter Singleton = new IsoDateTimeOffsetConverter();
    }
}
#pragma warning restore CS8618
#pragma warning restore CS8601
#pragma warning restore CS8603
