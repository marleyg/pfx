#pragma warning disable CS1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PathfinderFx.Integration.Model.Entities
{
	
	
	/// <summary>
	/// The standard followed to account for biogenic emissions and removals.
	/// </summary>
	[System.Runtime.Serialization.DataContractAttribute()]
	public enum Msdyn_SustainabilityProductCarbonFootprint_Msdyn_BiogenicAccountingMethodology
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		[OptionSetMetadataAttribute("GHGP", 2, "#0000ff")]
		Ghgp = 700610002,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		[OptionSetMetadataAttribute("ISO", 1, "#0000ff")]
		Iso = 700610001,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		[OptionSetMetadataAttribute("PEF", 0, "#0000ff")]
		Pef = 700610000,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		[OptionSetMetadataAttribute("Quantis", 3, "#0000ff")]
		Quantis = 700610003,
	}
	
	/// <summary>
	/// The IPCC Assessment Report used in the calculation of the PCF, with value: AR6 for the Sixth Assessment Report of the IPCC, or AR5 for the Fifth Assessment Report of the IPCC.
	/// </summary>
	[System.Runtime.Serialization.DataContractAttribute()]
	public enum Msdyn_SustainabilityProductCarbonFootprint_Msdyn_CharacterizationFactors
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		[OptionSetMetadataAttribute("AR5", 0, "#0000ff")]
		Ar5 = 700610000,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		[OptionSetMetadataAttribute("AR6", 1, "#0000ff")]
		Ar6 = 700610001,
	}
	
	/// <summary>
	/// The cross-sectoral standards applied for calculating or allocating GHG emissions.
	/// </summary>
	[System.Runtime.Serialization.DataContractAttribute()]
	public enum Msdyn_SustainabilityProductCarbonFootprint_Msdyn_CrossSectoralStandardsUsed
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		[OptionSetMetadataAttribute("GHG Protocol Product standard", 0, "#0000ff")]
		GhgProtocolProductStandard = 700610000,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		[OptionSetMetadataAttribute("ISO Standard 14044", 2, "#0000ff")]
		IsoStandard14044 = 700610002,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		[OptionSetMetadataAttribute("ISO Standard 14067", 1, "#0000ff")]
		IsoStandard14067 = 700610001,
	}
	
	/// <summary>
	/// The cross-sectoral standards applied for calculating or allocating GHG emissions.
	/// </summary>
	[System.Runtime.Serialization.DataContractAttribute()]
	public enum Msdyn_SustainabilityProductCarbonFootprint_Msdyn_CrossSectoralStandardsUsed1
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		[OptionSetMetadataAttribute("GHG Protocol Product standard", 0, "#0000ff")]
		GhgProtocolProductStandard = 700610000,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		[OptionSetMetadataAttribute("ISO Standard 14044", 2, "#0000ff")]
		IsoStandard14044 = 700610002,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		[OptionSetMetadataAttribute("ISO Standard 14067", 1, "#0000ff")]
		IsoStandard14067 = 700610001,
	}
	
	/// <summary>
	/// The cross-sectoral standards applied for calculating or allocating GHG emissions.
	/// </summary>
	[System.Runtime.Serialization.DataContractAttribute()]
	public enum Msdyn_SustainabilityProductCarbonFootprint_Msdyn_CrossSectoralStandardsUsed2
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		[OptionSetMetadataAttribute("GHG Protocol Product standard", 0, "#0000ff")]
		GhgProtocolProductStandard = 700610000,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		[OptionSetMetadataAttribute("ISO Standard 14044", 2, "#0000ff")]
		IsoStandard14044 = 700610002,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		[OptionSetMetadataAttribute("ISO Standard 14067", 1, "#0000ff")]
		IsoStandard14067 = 700610001,
	}
	
	/// <summary>
	/// The cross-sectoral standards applied for calculating or allocating GHG emissions.
	/// </summary>
	[System.Runtime.Serialization.DataContractAttribute()]
	public enum Msdyn_SustainabilityProductCarbonFootprint_Msdyn_CrossSectoralStandardsUsed3
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		[OptionSetMetadataAttribute("GHG Protocol Product standard", 0, "#0000ff")]
		GhgProtocolProductStandard = 700610000,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		[OptionSetMetadataAttribute("ISO Standard 14044", 2, "#0000ff")]
		IsoStandard14044 = 700610002,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		[OptionSetMetadataAttribute("ISO Standard 14067", 1, "#0000ff")]
		IsoStandard14067 = 700610001,
	}
	
	/// <summary>
	/// Status of the (Preview) Product carbon footprint
	/// </summary>
	[System.Runtime.Serialization.DataContractAttribute()]
	public enum Msdyn_SustainabilityProductCarbonFootprint_StateCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		[OptionSetMetadataAttribute("Active", 0)]
		Active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		[OptionSetMetadataAttribute("Inactive", 1)]
		Inactive = 1,
	}
	
	/// <summary>
	/// Reason for the status of the (Preview) Product carbon footprint
	/// </summary>
	[System.Runtime.Serialization.DataContractAttribute()]
	public enum Msdyn_SustainabilityProductCarbonFootprint_StatusCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		[OptionSetMetadataAttribute("Active", 0)]
		Active = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		[OptionSetMetadataAttribute("Inactive", 1)]
		Inactive = 2,
	}
	
	/// <summary>
	/// The carbon footprint of a product and related data in accordance with the Pathfinder Framework.
	/// </summary>
	[System.Runtime.Serialization.DataContractAttribute()]
	[Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("msdyn_sustainabilityproductcarbonfootprint")]
	public partial class Msdyn_SustainabilityProductCarbonFootprint : Microsoft.Xrm.Sdk.Entity
	{
		
		/// <summary>
		/// Available fields, a the time of codegen, for the msdyn_sustainabilityproductcarbonfootprint entity
		/// </summary>
		public partial class Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedByName = "createdbyname";
			public const string CreatedByYomiName = "createdbyyominame";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string CreatedOnBehalfByName = "createdonbehalfbyname";
			public const string CreatedOnBehalfByYomiName = "createdonbehalfbyyominame";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedByName = "modifiedbyname";
			public const string ModifiedByYomiName = "modifiedbyyominame";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string ModifiedOnBehalfByName = "modifiedonbehalfbyname";
			public const string ModifiedOnBehalfByYomiName = "modifiedonbehalfbyyominame";
			public const string Msdyn_AircraftGHGEmissions = "msdyn_aircraftghgemissions";
			public const string Msdyn_AllocationRulesDescription = "msdyn_allocationrulesdescription";
			public const string Msdyn_BiogenicAccountingMethodology = "msdyn_biogenicaccountingmethodology";
			public const string Msdyn_BiogenicAccountingMethodologyName = "msdyn_biogenicaccountingmethodologyname";
			public const string Msdyn_BiogenicCarbonContent = "msdyn_biogeniccarboncontent";
			public const string Msdyn_BiogenicCarbonWithdrawal = "msdyn_biogeniccarbonwithdrawal";
			public const string Msdyn_BoundaryProcessesDescription = "msdyn_boundaryprocessesdescription";
			public const string Msdyn_CharacterizationFactors = "msdyn_characterizationfactors";
			public const string Msdyn_CharacterizationFactorsName = "msdyn_characterizationfactorsname";
			public const string Msdyn_CompletenessDQR = "msdyn_completenessdqr";
			public const string Msdyn_CoveragePercent = "msdyn_coveragepercent";
			public const string Msdyn_CrossSectoralStandardsUsed = "msdyn_crosssectoralstandardsused";
			public const string Msdyn_CrossSectoralStandardsUsed1 = "msdyn_crosssectoralstandardsused1";
			public const string Msdyn_CrossSectoralStandardsUsed1Name = "msdyn_crosssectoralstandardsused1name";
			public const string Msdyn_CrossSectoralStandardsUsed2 = "msdyn_crosssectoralstandardsused2";
			public const string Msdyn_CrossSectoralStandardsUsed2Name = "msdyn_crosssectoralstandardsused2name";
			public const string Msdyn_CrossSectoralStandardsUsed3 = "msdyn_crosssectoralstandardsused3";
			public const string Msdyn_CrossSectoralStandardsUsed3Name = "msdyn_crosssectoralstandardsused3name";
			public const string Msdyn_CrossSectoralStandardsUsedName = "msdyn_crosssectoralstandardsusedname";
			public const string Msdyn_DataConnection = "msdyn_dataconnection";
			public const string Msdyn_DataConnectionName = "msdyn_dataconnectionname";
			public const string Msdyn_DataConnectionRefresh = "msdyn_dataconnectionrefresh";
			public const string Msdyn_DataConnectionRefreshName = "msdyn_dataconnectionrefreshname";
			public const string Msdyn_DataDefinition = "msdyn_datadefinition";
			public const string Msdyn_DataDefinitionName = "msdyn_datadefinitionname";
			public const string Msdyn_DeclaredUnit = "msdyn_declaredunit";
			public const string Msdyn_DeclaredUnitName = "msdyn_declaredunitname";
			public const string Msdyn_DLuCGHGEmissions = "msdyn_dlucghgemissions";
			public const string Msdyn_ExemptedEmissionsDescription = "msdyn_exemptedemissionsdescription";
			public const string Msdyn_ExemptedEmissionsPercent = "msdyn_exemptedemissionspercent";
			public const string Msdyn_FossilCarbonContent = "msdyn_fossilcarboncontent";
			public const string Msdyn_FossilGHGemIsSiOns = "msdyn_fossilghgemissions";
			public const string Msdyn_GeographicalDQR = "msdyn_geographicaldqr";
			public const string Msdyn_GeographyCountry = "msdyn_geographycountry";
			public const string Msdyn_GeographyCountrySubdivision = "msdyn_geographycountrysubdivision";
			public const string Msdyn_GeographyRegionOrSubregion = "msdyn_geographyregionorsubregion";
			public const string Msdyn_ILuCGHGEmissions = "msdyn_ilucghgemissions";
			public const string Msdyn_LandManagementGHGEmissions = "msdyn_landmanagementghgemissions";
			public const string Msdyn_Msdyn_ProductCarbonFootprint_Msdyn_ProductFootprintRuleMapping_ProductCarbonFootprint = "Msdyn_Msdyn_ProductCarbonFootprint_Msdyn_ProductFootprintRuleMapping_ProductCarbonFootprint";
			public const string Msdyn_Msdyn_ProductCarbonFootprintAssurance_Msdyn_ProductCarbonFootprint_ProductCarbonFootprintAsSur = "msdyn_msdyn_productcarbonfootprintassurance_msdyn_productcarbonfootprint_productcarbonfootprintassur";
			public const string Msdyn_Msdyn_SustainabilityProductFootprint_SuSt = "Msdyn_Msdyn_SustainabilityProductFootprint_SuSt";
			public const string Msdyn_Name = "msdyn_name";
			public const string Msdyn_OriginCorrelationId = "msdyn_origincorrelationid";
			public const string Msdyn_OtherBiogenicGHGEmissions = "msdyn_otherbiogenicghgemissions";
			public const string Msdyn_PackagingEmissionsIncluded = "msdyn_packagingemissionsincluded";
			public const string Msdyn_PackagingEmissionsIncludedName = "msdyn_packagingemissionsincludedname";
			public const string Msdyn_PackAgInGgHGEmissions = "msdyn_packagingghgemissions";
			public const string Msdyn_PcFExcludingBiogenic = "msdyn_pcfexcludingbiogenic";
			public const string Msdyn_PcFIncludingBiogenic = "msdyn_pcfincludingbiogenic";
			public const string Msdyn_PrimaryDataShare = "msdyn_primarydatashare";
			public const string Msdyn_ProductCarbonFootprintAssurance = "msdyn_productcarbonfootprintassurance";
			public const string Msdyn_ProductCarbonFootprintAssuranceName = "msdyn_productcarbonfootprintassurancename";
			public const string Msdyn_ReferencePeriodEnd = "msdyn_referenceperiodend";
			public const string Msdyn_ReferencePeriodStart = "msdyn_referenceperiodstart";
			public const string Msdyn_ReliabilityDQR = "msdyn_reliabilitydqr";
			public const string Msdyn_SecondaryEmissionFactorSources = "msdyn_secondaryemissionfactorsources";
			public const string Msdyn_SupplierSurveyDetail = "msdyn_suppliersurveydetail";
			public const string Msdyn_SupplierSurveyDetailName = "msdyn_suppliersurveydetailname";
			public const string Msdyn_SustainabilityProductCarbonFootprintId = "msdyn_sustainabilityproductcarbonfootprintid";
			public const string Id = "msdyn_sustainabilityproductcarbonfootprintid";
			public const string Msdyn_TechnologicalDQR = "msdyn_technologicaldqr";
			public const string Msdyn_TemporalDQR = "msdyn_temporaldqr";
			public const string Msdyn_UncertaintyAssessmentDescription = "msdyn_uncertaintyassessmentdescription";
			public const string Msdyn_UnitaryProductAmount = "msdyn_unitaryproductamount";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwnerIdName = "owneridname";
			public const string OwnerIdYomiName = "owneridyominame";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningBusinessUnitName = "owningbusinessunitname";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string StateCode = "statecode";
			public const string StateCodename = "statecodename";
			public const string StatusCode = "statuscode";
			public const string StatusCodename = "statuscodename";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UtcConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}
		
		[System.Diagnostics.DebuggerNonUserCode()]
		public Msdyn_SustainabilityProductCarbonFootprint(Guid id) : 
				base(EntityLogicalName, id)
		{
		}
		
		[System.Diagnostics.DebuggerNonUserCode()]
		public Msdyn_SustainabilityProductCarbonFootprint(string keyName, object keyValue) : 
				base(EntityLogicalName, keyName, keyValue)
		{
		}
		
		[System.Diagnostics.DebuggerNonUserCode()]
		public Msdyn_SustainabilityProductCarbonFootprint(Microsoft.Xrm.Sdk.KeyAttributeCollection keyAttributes) : 
				base(EntityLogicalName, keyAttributes)
		{
		}
		
		public const string AlternateKeys = "msdyn_name|msdyn_origincorrelationid";
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		[System.Diagnostics.DebuggerNonUserCode()]
		public Msdyn_SustainabilityProductCarbonFootprint() : 
				base(EntityLogicalName)
		{
		}
		
		public const string PrimaryIdAttribute = "msdyn_sustainabilityproductcarbonfootprintid";
		
		public const string PrimaryNameAttribute = "msdyn_name";
		
		public const string EntitySchemaName = "msdyn_sustainabilityproductcarbonfootprint";
		
		public const string EntityLogicalName = "msdyn_sustainabilityproductcarbonfootprint";
		
		public const string EntityLogicalCollectionName = "msdyn_sustainabilityproductcarbonfootprints";
		
		public const string EntitySetName = "msdyn_sustainabilityproductcarbonfootprints";
		
		/// <summary>
		/// Unique identifier of the user who created the record.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("createdby")]
		public Microsoft.Xrm.Sdk.EntityReference CreatedBy
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("createdby");
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("createdbyname")]
		public string CreatedByName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (FormattedValues.Contains("createdby"))
				{
					return FormattedValues["createdby"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("createdbyyominame")]
		public string CreatedByYomiName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (FormattedValues.Contains("createdby"))
				{
					return FormattedValues["createdby"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// Date and time when the record was created.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("createdon")]
		public Nullable<DateTime> CreatedOn
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return GetAttributeValue<Nullable<DateTime>>("createdon");
			}
		}
		
		/// <summary>
		/// Unique identifier of the delegate user who created the record.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("createdonbehalfby")]
		public Microsoft.Xrm.Sdk.EntityReference CreatedOnBehalfBy
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("createdonbehalfby");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				SetAttributeValue("createdonbehalfby", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("createdonbehalfbyname")]
		public string CreatedOnBehalfByName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (FormattedValues.Contains("createdonbehalfby"))
				{
					return FormattedValues["createdonbehalfby"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("createdonbehalfbyyominame")]
		public string CreatedOnBehalfByYomiName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (FormattedValues.Contains("createdonbehalfby"))
				{
					return FormattedValues["createdonbehalfby"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// Sequence number of the import that created this record.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("importsequencenumber")]
		public Nullable<int> ImportSequenceNumber
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return GetAttributeValue<Nullable<int>>("importsequencenumber");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				SetAttributeValue("importsequencenumber", value);
			}
		}
		
		/// <summary>
		/// Unique identifier of the user who modified the record.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("modifiedby")]
		public Microsoft.Xrm.Sdk.EntityReference ModifiedBy
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("modifiedby");
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("modifiedbyname")]
		public string ModifiedByName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (FormattedValues.Contains("modifiedby"))
				{
					return FormattedValues["modifiedby"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("modifiedbyyominame")]
		public string ModifiedByYomiName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (FormattedValues.Contains("modifiedby"))
				{
					return FormattedValues["modifiedby"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// Date and time when the record was modified.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("modifiedon")]
		public Nullable<DateTime> ModifiedOn
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return GetAttributeValue<Nullable<DateTime>>("modifiedon");
			}
		}
		
		/// <summary>
		/// Unique identifier of the delegate user who modified the record.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("modifiedonbehalfby")]
		public Microsoft.Xrm.Sdk.EntityReference ModifiedOnBehalfBy
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("modifiedonbehalfby");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				SetAttributeValue("modifiedonbehalfby", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("modifiedonbehalfbyname")]
		public string ModifiedOnBehalfByName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (FormattedValues.Contains("modifiedonbehalfby"))
				{
					return FormattedValues["modifiedonbehalfby"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("modifiedonbehalfbyyominame")]
		public string ModifiedOnBehalfByYomiName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (FormattedValues.Contains("modifiedonbehalfby"))
				{
					return FormattedValues["modifiedonbehalfby"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// The GHG emissions resulting from aircraft engine usage for the transport of the product. Must be calculated with unit kgCO2e per declared unit and non-negative.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msdyn_aircraftghgemissions")]
		public Nullable<decimal> Msdyn_AircraftGHGEmissions
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return GetAttributeValue<Nullable<decimal>>("msdyn_aircraftghgemissions");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				SetAttributeValue("msdyn_aircraftghgemissions", value);
			}
		}
		
		/// <summary>
		/// If present, a description of any allocation rules applied and the rationale explaining how the selected approach aligns with Pathfinder Framework rules.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msdyn_allocationrulesdescription")]
		public string Msdyn_AllocationRulesDescription
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return GetAttributeValue<string>("msdyn_allocationrulesdescription");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				SetAttributeValue("msdyn_allocationrulesdescription", value);
			}
		}
		
		/// <summary>
		/// The standard followed to account for biogenic emissions and removals.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msdyn_biogenicaccountingmethodology")]
		public virtual Msdyn_SustainabilityProductCarbonFootprint_Msdyn_BiogenicAccountingMethodology? Msdyn_BiogenicAccountingMethodology
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return ((Msdyn_SustainabilityProductCarbonFootprint_Msdyn_BiogenicAccountingMethodology?)(EntityOptionSetEnum.GetEnum(this, "msdyn_biogenicaccountingmethodology")));
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				SetAttributeValue("msdyn_biogenicaccountingmethodology", value.HasValue ? new Microsoft.Xrm.Sdk.OptionSetValue((int)value) : null);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msdyn_biogenicaccountingmethodologyname")]
		public string Msdyn_BiogenicAccountingMethodologyName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (FormattedValues.Contains("msdyn_biogenicaccountingmethodology"))
				{
					return FormattedValues["msdyn_biogenicaccountingmethodology"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// The biogenic carbon amount embodied in the product. The value must be calculated with unit kgCO2e per declared unit, expressed as a decimal equal to or greater than zero.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msdyn_biogeniccarboncontent")]
		public Nullable<decimal> Msdyn_BiogenicCarbonContent
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return GetAttributeValue<Nullable<decimal>>("msdyn_biogeniccarboncontent");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				SetAttributeValue("msdyn_biogeniccarboncontent", value);
			}
		}
		
		/// <summary>
		/// If present, the biogenic carbon content in the product converted to CO2e. The value must be calculated per declared unit with unit kg expressed as a decimal equal to or greater than zero.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msdyn_biogeniccarbonwithdrawal")]
		public Nullable<decimal> Msdyn_BiogenicCarbonWithdrawal
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return GetAttributeValue<Nullable<decimal>>("msdyn_biogeniccarbonwithdrawal");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				SetAttributeValue("msdyn_biogeniccarbonwithdrawal", value);
			}
		}
		
		/// <summary>
		/// If present, the processes attributable to each lifecycle stage. If no such description is available or otherwise provided, then this field must be empty.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msdyn_boundaryprocessesdescription")]
		public string Msdyn_BoundaryProcessesDescription
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return GetAttributeValue<string>("msdyn_boundaryprocessesdescription");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				SetAttributeValue("msdyn_boundaryprocessesdescription", value);
			}
		}
		
		/// <summary>
		/// The IPCC Assessment Report used in the calculation of the PCF.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msdyn_characterizationfactors")]
		public virtual Msdyn_SustainabilityProductCarbonFootprint_Msdyn_CharacterizationFactors? Msdyn_CharacterizationFactors
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return ((Msdyn_SustainabilityProductCarbonFootprint_Msdyn_CharacterizationFactors?)(EntityOptionSetEnum.GetEnum(this, "msdyn_characterizationfactors")));
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				SetAttributeValue("msdyn_characterizationfactors", value.HasValue ? new Microsoft.Xrm.Sdk.OptionSetValue((int)value) : null);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msdyn_characterizationfactorsname")]
		public string Msdyn_CharacterizationFactorsName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (FormattedValues.Contains("msdyn_characterizationfactors"))
				{
					return FormattedValues["msdyn_characterizationfactors"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// DQR based on data quality matrix, scoring completeness of data collected for PCF from weighted average of all inputs >5% of PCF emissions. Must be from 1 to 3, inclusive.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msdyn_completenessdqr")]
		public Nullable<decimal> Msdyn_CompletenessDQR
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return GetAttributeValue<Nullable<decimal>>("msdyn_completenessdqr");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				SetAttributeValue("msdyn_completenessdqr", value);
			}
		}
		
		/// <summary>
		/// Percentage of PCF included in the data quality assessment based on the >5% emissions threshold.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msdyn_coveragepercent")]
		public Nullable<decimal> Msdyn_CoveragePercent
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return GetAttributeValue<Nullable<decimal>>("msdyn_coveragepercent");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				SetAttributeValue("msdyn_coveragepercent", value);
			}
		}
		
		/// <summary>
		/// The cross-sectoral standards applied for calculating or allocating GHG emissions.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msdyn_crosssectoralstandardsused")]
		public virtual IEnumerable<Msdyn_SustainabilityProductCarbonFootprint_Msdyn_CrossSectoralStandardsUsed> Msdyn_CrossSectoralStandardsUsed
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return EntityOptionSetEnum.GetMultiEnum<Msdyn_SustainabilityProductCarbonFootprint_Msdyn_CrossSectoralStandardsUsed>(this, "msdyn_crosssectoralstandardsused");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				SetAttributeValue("msdyn_crosssectoralstandardsused", EntityOptionSetEnum.GetMultiEnum(this, "msdyn_crosssectoralstandardsused", value));
			}
		}
		
		/// <summary>
		/// The cross-sectoral standards applied for calculating or allocating GHG emissions.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msdyn_crosssectoralstandardsused1")]
		public virtual Msdyn_SustainabilityProductCarbonFootprint_Msdyn_CrossSectoralStandardsUsed1? Msdyn_CrossSectoralStandardsUsed1
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return ((Msdyn_SustainabilityProductCarbonFootprint_Msdyn_CrossSectoralStandardsUsed1?)(EntityOptionSetEnum.GetEnum(this, "msdyn_crosssectoralstandardsused1")));
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				SetAttributeValue("msdyn_crosssectoralstandardsused1", value.HasValue ? new Microsoft.Xrm.Sdk.OptionSetValue((int)value) : null);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msdyn_crosssectoralstandardsused1name")]
		public string Msdyn_CrossSectoralStandardsUsed1Name
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (FormattedValues.Contains("msdyn_crosssectoralstandardsused1"))
				{
					return FormattedValues["msdyn_crosssectoralstandardsused1"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// The cross-sectoral standards applied for calculating or allocating GHG emissions.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msdyn_crosssectoralstandardsused2")]
		public virtual Msdyn_SustainabilityProductCarbonFootprint_Msdyn_CrossSectoralStandardsUsed2? Msdyn_CrossSectoralStandardsUsed2
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return ((Msdyn_SustainabilityProductCarbonFootprint_Msdyn_CrossSectoralStandardsUsed2?)(EntityOptionSetEnum.GetEnum(this, "msdyn_crosssectoralstandardsused2")));
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				SetAttributeValue("msdyn_crosssectoralstandardsused2", value.HasValue ? new Microsoft.Xrm.Sdk.OptionSetValue((int)value) : null);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msdyn_crosssectoralstandardsused2name")]
		public string Msdyn_CrossSectoralStandardsUsed2Name
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (FormattedValues.Contains("msdyn_crosssectoralstandardsused2"))
				{
					return FormattedValues["msdyn_crosssectoralstandardsused2"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// The cross-sectoral standards applied for calculating or allocating GHG emissions.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msdyn_crosssectoralstandardsused3")]
		public virtual Msdyn_SustainabilityProductCarbonFootprint_Msdyn_CrossSectoralStandardsUsed3? Msdyn_CrossSectoralStandardsUsed3
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return ((Msdyn_SustainabilityProductCarbonFootprint_Msdyn_CrossSectoralStandardsUsed3?)(EntityOptionSetEnum.GetEnum(this, "msdyn_crosssectoralstandardsused3")));
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				SetAttributeValue("msdyn_crosssectoralstandardsused3", value.HasValue ? new Microsoft.Xrm.Sdk.OptionSetValue((int)value) : null);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msdyn_crosssectoralstandardsused3name")]
		public string Msdyn_CrossSectoralStandardsUsed3Name
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (FormattedValues.Contains("msdyn_crosssectoralstandardsused3"))
				{
					return FormattedValues["msdyn_crosssectoralstandardsused3"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msdyn_crosssectoralstandardsusedname")]
		public string Msdyn_CrossSectoralStandardsUsedName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (FormattedValues.Contains("msdyn_crosssectoralstandardsused"))
				{
					return FormattedValues["msdyn_crosssectoralstandardsused"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// The connection that ingested this sustainability product carbon footprint
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msdyn_dataconnection")]
		public Microsoft.Xrm.Sdk.EntityReference Msdyn_DataConnection
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("msdyn_dataconnection");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				SetAttributeValue("msdyn_dataconnection", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msdyn_dataconnectionname")]
		public string Msdyn_DataConnectionName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (FormattedValues.Contains("msdyn_dataconnection"))
				{
					return FormattedValues["msdyn_dataconnection"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// The connection refresh which ingested this sustainability product carbon footprint
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msdyn_dataconnectionrefresh")]
		public Microsoft.Xrm.Sdk.EntityReference Msdyn_DataConnectionRefresh
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("msdyn_dataconnectionrefresh");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				SetAttributeValue("msdyn_dataconnectionrefresh", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msdyn_dataconnectionrefreshname")]
		public string Msdyn_DataConnectionRefreshName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (FormattedValues.Contains("msdyn_dataconnectionrefresh"))
				{
					return FormattedValues["msdyn_dataconnectionrefresh"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// Lookup to corresponding data definition of sustainability product carbon footprint
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msdyn_datadefinition")]
		public Microsoft.Xrm.Sdk.EntityReference Msdyn_DataDefinition
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("msdyn_datadefinition");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				SetAttributeValue("msdyn_datadefinition", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msdyn_datadefinitionname")]
		public string Msdyn_DataDefinitionName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (FormattedValues.Contains("msdyn_datadefinition"))
				{
					return FormattedValues["msdyn_datadefinition"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// The unit of analysis of the product.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msdyn_declaredunit")]
		public Microsoft.Xrm.Sdk.EntityReference Msdyn_DeclaredUnit
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("msdyn_declaredunit");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				SetAttributeValue("msdyn_declaredunit", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msdyn_declaredunitname")]
		public string Msdyn_DeclaredUnitName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (FormattedValues.Contains("msdyn_declaredunit"))
				{
					return FormattedValues["msdyn_declaredunit"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// Emissions from recent carbon stock loss from land conversion on land in consideration. Must include dLUC if available, else sLUC can be used. Unit kgCO2e per declared unit and must be >= 0. 
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msdyn_dlucghgemissions")]
		public Nullable<decimal> Msdyn_DLuCGHGEmissions
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return GetAttributeValue<Nullable<decimal>>("msdyn_dlucghgemissions");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				SetAttributeValue("msdyn_dlucghgemissions", value);
			}
		}
		
		/// <summary>
		/// Rationale behind exclusion of specific PCF emissions, can have no data if no emissions were excluded.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msdyn_exemptedemissionsdescription")]
		public string Msdyn_ExemptedEmissionsDescription
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return GetAttributeValue<string>("msdyn_exemptedemissionsdescription");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				SetAttributeValue("msdyn_exemptedemissionsdescription", value);
			}
		}
		
		/// <summary>
		/// The percentage of emissions excluded from PCF, expressed as a decimal number from 0.0 to 5, inclusive.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msdyn_exemptedemissionspercent")]
		public Nullable<decimal> Msdyn_ExemptedEmissionsPercent
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return GetAttributeValue<Nullable<decimal>>("msdyn_exemptedemissionspercent");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				SetAttributeValue("msdyn_exemptedemissionspercent", value);
			}
		}
		
		/// <summary>
		/// The fossil carbon amount embodied in the product. The value must be calculated with unit kgCO2e per declared unit, expressed as a decimal equal to or greater than zero. 
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msdyn_fossilcarboncontent")]
		public Nullable<decimal> Msdyn_FossilCarbonContent
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return GetAttributeValue<Nullable<decimal>>("msdyn_fossilcarboncontent");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				SetAttributeValue("msdyn_fossilcarboncontent", value);
			}
		}
		
		/// <summary>
		/// The emissions from the combustion of fossil sources. The value must be calculated with unit kgCO2e per declared unit, expressed as a decimal equal to or greater than zero.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msdyn_fossilghgemissions")]
		public Nullable<decimal> Msdyn_FossilGHGemIsSiOns
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return GetAttributeValue<Nullable<decimal>>("msdyn_fossilghgemissions");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				SetAttributeValue("msdyn_fossilghgemissions", value);
			}
		}
		
		/// <summary>
		/// DQR based on data quality matrix, scoring geographical representativeness of sources used for PCF from weighted average of all inputs >5% of PCF emissions. Must be from 1 to 3, inclusive.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msdyn_geographicaldqr")]
		public Nullable<decimal> Msdyn_GeographicalDQR
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return GetAttributeValue<Nullable<decimal>>("msdyn_geographicaldqr");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				SetAttributeValue("msdyn_geographicaldqr", value);
			}
		}
		
		/// <summary>
		/// If present, the value must conform to an ISO 3166-2 alpha-2 code.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msdyn_geographycountry")]
		public string Msdyn_GeographyCountry
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return GetAttributeValue<string>("msdyn_geographycountry");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				SetAttributeValue("msdyn_geographycountry", value);
			}
		}
		
		/// <summary>
		/// If present, an ISO 3166-2 subdivision code.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msdyn_geographycountrysubdivision")]
		public string Msdyn_GeographyCountrySubdivision
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return GetAttributeValue<string>("msdyn_geographycountrysubdivision");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				SetAttributeValue("msdyn_geographycountrysubdivision", value);
			}
		}
		
		/// <summary>
		/// If present, the value must conform to data type RegionOrSubregion, as specified by the Pathfinder Framework.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msdyn_geographyregionorsubregion")]
		public string Msdyn_GeographyRegionOrSubregion
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return GetAttributeValue<string>("msdyn_geographyregionorsubregion");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				SetAttributeValue("msdyn_geographyregionorsubregion", value);
			}
		}
		
		/// <summary>
		/// Emissions from recent carbon stock loss from land conversion on land outside control of company or its supply chain, induced by demand change. Unit kgCO2e per declared unit and must be >= 0. 
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msdyn_ilucghgemissions")]
		public Nullable<decimal> Msdyn_ILuCGHGEmissions
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return GetAttributeValue<Nullable<decimal>>("msdyn_ilucghgemissions");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				SetAttributeValue("msdyn_ilucghgemissions", value);
			}
		}
		
		/// <summary>
		/// GHG emissions and removals associated with land management-related changes, including non-CO2 sources. Must be calculated with unit kgCO2e per declared unit and non-negative.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msdyn_landmanagementghgemissions")]
		public Nullable<decimal> Msdyn_LandManagementGHGEmissions
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return GetAttributeValue<Nullable<decimal>>("msdyn_landmanagementghgemissions");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				SetAttributeValue("msdyn_landmanagementghgemissions", value);
			}
		}
		
		/// <summary>
		/// The name of the custom entity.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msdyn_name")]
		public string Msdyn_Name
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return GetAttributeValue<string>("msdyn_name");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				SetAttributeValue("msdyn_name", value);
			}
		}
		
		/// <summary>
		/// An optional identifier to correlate record with data origin.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msdyn_origincorrelationid")]
		public string Msdyn_OriginCorrelationId
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return GetAttributeValue<string>("msdyn_origincorrelationid");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				SetAttributeValue("msdyn_origincorrelationid", value);
			}
		}
		
		/// <summary>
		/// All other biogenic GHG emissions associated with product manufacturing and transport that are not included in dLUC, iLUC, and land management. Unit kgCO2e per declared unit and must be >= 0.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msdyn_otherbiogenicghgemissions")]
		public Nullable<decimal> Msdyn_OtherBiogenicGHGEmissions
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return GetAttributeValue<Nullable<decimal>>("msdyn_otherbiogenicghgemissions");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				SetAttributeValue("msdyn_otherbiogenicghgemissions", value);
			}
		}
		
		/// <summary>
		/// A boolean flag indicating whether packaging emissions are included in the PCF.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msdyn_packagingemissionsincluded")]
		public Nullable<bool> Msdyn_PackagingEmissionsIncluded
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return GetAttributeValue<Nullable<bool>>("msdyn_packagingemissionsincluded");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				SetAttributeValue("msdyn_packagingemissionsincluded", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msdyn_packagingemissionsincludedname")]
		public string Msdyn_PackagingEmissionsIncludedName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (FormattedValues.Contains("msdyn_packagingemissionsincluded"))
				{
					return FormattedValues["msdyn_packagingemissionsincluded"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// Emissions from the packaging of the product. Must be calculated with unit kgCO2e per declared unit and non-negative. The field must be empty if packaging emissions included is false.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msdyn_packagingghgemissions")]
		public Nullable<decimal> Msdyn_PackAgInGgHGEmissions
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return GetAttributeValue<Nullable<decimal>>("msdyn_packagingghgemissions");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				SetAttributeValue("msdyn_packagingghgemissions", value);
			}
		}
		
		/// <summary>
		/// The PCF of the product excluding biogenic emissions. The value must be calculated with unit kgCO2e per declared unit, expressed as a decimal equal to or greater than zero. 
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msdyn_pcfexcludingbiogenic")]
		public Nullable<decimal> Msdyn_PcFExcludingBiogenic
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return GetAttributeValue<Nullable<decimal>>("msdyn_pcfexcludingbiogenic");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				SetAttributeValue("msdyn_pcfexcludingbiogenic", value);
			}
		}
		
		/// <summary>
		/// The PCF of the product including biogenic emissions. The value must be calculated with unit kgCO2e per declared unit. This column can be less than 0.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msdyn_pcfincludingbiogenic")]
		public Nullable<decimal> Msdyn_PcFIncludingBiogenic
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return GetAttributeValue<Nullable<decimal>>("msdyn_pcfincludingbiogenic");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				SetAttributeValue("msdyn_pcfincludingbiogenic", value);
			}
		}
		
		/// <summary>
		/// The share of primary data in percent. For recommended business logic, see the Pathfinder Framework.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msdyn_primarydatashare")]
		public Nullable<decimal> Msdyn_PrimaryDataShare
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return GetAttributeValue<Nullable<decimal>>("msdyn_primarydatashare");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				SetAttributeValue("msdyn_primarydatashare", value);
			}
		}
		
		/// <summary>
		/// Assurance information in accordance with the Pathfinder Framework.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msdyn_productcarbonfootprintassurance")]
		public Microsoft.Xrm.Sdk.EntityReference Msdyn_ProductCarbonFootprintAssurance
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("msdyn_productcarbonfootprintassurance");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				SetAttributeValue("msdyn_productcarbonfootprintassurance", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msdyn_productcarbonfootprintassurancename")]
		public string Msdyn_ProductCarbonFootprintAssuranceName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (FormattedValues.Contains("msdyn_productcarbonfootprintassurance"))
				{
					return FormattedValues["msdyn_productcarbonfootprintassurance"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// The end of the time boundary for which the PCF value is considered to be representative.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msdyn_referenceperiodend")]
		public Nullable<DateTime> Msdyn_ReferencePeriodEnd
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return GetAttributeValue<Nullable<DateTime>>("msdyn_referenceperiodend");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				SetAttributeValue("msdyn_referenceperiodend", value);
			}
		}
		
		/// <summary>
		/// The start of the time boundary for which the PCF value is considered to be representative.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msdyn_referenceperiodstart")]
		public Nullable<DateTime> Msdyn_ReferencePeriodStart
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return GetAttributeValue<Nullable<DateTime>>("msdyn_referenceperiodstart");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				SetAttributeValue("msdyn_referenceperiodstart", value);
			}
		}
		
		/// <summary>
		/// DQR based on data quality matrix, scoring reliability of data collected for PCF from weighted average of all inputs >5% of PCF emissions. Must be from 1 to 3, inclusive.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msdyn_reliabilitydqr")]
		public Nullable<decimal> Msdyn_ReliabilityDQR
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return GetAttributeValue<Nullable<decimal>>("msdyn_reliabilitydqr");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				SetAttributeValue("msdyn_reliabilitydqr", value);
			}
		}
		
		/// <summary>
		/// If secondary data was used to calculate the PCF, then it must include this field with value the emission factors used for the PCF calculation. Otherwise, this property must be undefined.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msdyn_secondaryemissionfactorsources")]
		public string Msdyn_SecondaryEmissionFactorSources
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return GetAttributeValue<string>("msdyn_secondaryemissionfactorsources");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				SetAttributeValue("msdyn_secondaryemissionfactorsources", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msdyn_suppliersurveydetail")]
		public Microsoft.Xrm.Sdk.EntityReference Msdyn_SupplierSurveyDetail
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("msdyn_suppliersurveydetail");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				SetAttributeValue("msdyn_suppliersurveydetail", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msdyn_suppliersurveydetailname")]
		public string Msdyn_SupplierSurveyDetailName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (FormattedValues.Contains("msdyn_suppliersurveydetail"))
				{
					return FormattedValues["msdyn_suppliersurveydetail"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// Unique identifier for entity instances.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msdyn_sustainabilityproductcarbonfootprintid")]
		public Nullable<Guid> Msdyn_SustainabilityProductCarbonFootprintId
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return GetAttributeValue<Nullable<Guid>>("msdyn_sustainabilityproductcarbonfootprintid");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				SetAttributeValue("msdyn_sustainabilityproductcarbonfootprintid", value);
				if (value.HasValue)
				{
					base.Id = value.Value;
				}
				else
				{
					base.Id = Guid.Empty;
				}
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msdyn_sustainabilityproductcarbonfootprintid")]
		public override Guid Id
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return base.Id;
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				Msdyn_SustainabilityProductCarbonFootprintId = value;
			}
		}
		
		/// <summary>
		/// DQR based on data quality matrix, scoring technological representativeness of sources used for PCF from weighted average of all inputs >5% of PCF emissions. Must be from 1 to 3, inclusive.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msdyn_technologicaldqr")]
		public Nullable<decimal> Msdyn_TechnologicalDQR
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return GetAttributeValue<Nullable<decimal>>("msdyn_technologicaldqr");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				SetAttributeValue("msdyn_technologicaldqr", value);
			}
		}
		
		/// <summary>
		/// DQR based on data quality matrix, scoring temporal representativeness of sources used for PCF from weighted average of all inputs >5% of PCF emissions. Must be from 1 to 3, inclusive.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msdyn_temporaldqr")]
		public Nullable<decimal> Msdyn_TemporalDQR
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return GetAttributeValue<Nullable<decimal>>("msdyn_temporaldqr");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				SetAttributeValue("msdyn_temporaldqr", value);
			}
		}
		
		/// <summary>
		/// If present, the results, key drivers, and a short qualitative description of the uncertainty assessment.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msdyn_uncertaintyassessmentdescription")]
		public string Msdyn_UncertaintyAssessmentDescription
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return GetAttributeValue<string>("msdyn_uncertaintyassessmentdescription");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				SetAttributeValue("msdyn_uncertaintyassessmentdescription", value);
			}
		}
		
		/// <summary>
		/// The amount of declared units contained within the product to which the PCF is referring. The value must be strictly greater than 0.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msdyn_unitaryproductamount")]
		public Nullable<decimal> Msdyn_UnitaryProductAmount
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return GetAttributeValue<Nullable<decimal>>("msdyn_unitaryproductamount");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				SetAttributeValue("msdyn_unitaryproductamount", value);
			}
		}
		
		/// <summary>
		/// Date and time that the record was migrated.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("overriddencreatedon")]
		public Nullable<DateTime> OverriddenCreatedOn
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return GetAttributeValue<Nullable<DateTime>>("overriddencreatedon");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				SetAttributeValue("overriddencreatedon", value);
			}
		}
		
		/// <summary>
		/// Owner Id
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ownerid")]
		public Microsoft.Xrm.Sdk.EntityReference OwnerId
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("ownerid");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				SetAttributeValue("ownerid", value);
			}
		}
		
		/// <summary>
		/// Name of the owner
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("owneridname")]
		public string OwnerIdName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (FormattedValues.Contains("ownerid"))
				{
					return FormattedValues["ownerid"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// Yomi name of the owner
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("owneridyominame")]
		public string OwnerIdYomiName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (FormattedValues.Contains("ownerid"))
				{
					return FormattedValues["ownerid"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// Unique identifier for the business unit that owns the record
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("owningbusinessunit")]
		public Microsoft.Xrm.Sdk.EntityReference OwningBusinessUnit
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("owningbusinessunit");
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("owningbusinessunitname")]
		public string OwningBusinessUnitName
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (FormattedValues.Contains("owningbusinessunit"))
				{
					return FormattedValues["owningbusinessunit"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// Unique identifier for the team that owns the record.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("owningteam")]
		public Microsoft.Xrm.Sdk.EntityReference OwningTeam
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("owningteam");
			}
		}
		
		/// <summary>
		/// Unique identifier for the user that owns the record.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("owninguser")]
		public Microsoft.Xrm.Sdk.EntityReference OwningUser
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("owninguser");
			}
		}
		
		/// <summary>
		/// Status of the (Preview) Sustainability product carbon footprint
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("statecode")]
		public virtual Msdyn_SustainabilityProductCarbonFootprint_StateCode? StateCode
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return ((Msdyn_SustainabilityProductCarbonFootprint_StateCode?)(EntityOptionSetEnum.GetEnum(this, "statecode")));
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				SetAttributeValue("statecode", value.HasValue ? new Microsoft.Xrm.Sdk.OptionSetValue((int)value) : null);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("statecodename")]
		public string StateCodename
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (FormattedValues.Contains("statecode"))
				{
					return FormattedValues["statecode"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// Reason for the status of the (Preview) Sustainability product carbon footprint
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("statuscode")]
		public virtual Msdyn_SustainabilityProductCarbonFootprint_StatusCode? StatusCode
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return ((Msdyn_SustainabilityProductCarbonFootprint_StatusCode?)(EntityOptionSetEnum.GetEnum(this, "statuscode")));
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				SetAttributeValue("statuscode", value.HasValue ? new Microsoft.Xrm.Sdk.OptionSetValue((int)value) : null);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("statuscodename")]
		public string StatusCodename
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				if (FormattedValues.Contains("statuscode"))
				{
					return FormattedValues["statuscode"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// For internal use only.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("timezoneruleversionnumber")]
		public Nullable<int> TimeZoneRuleVersionNumber
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return GetAttributeValue<Nullable<int>>("timezoneruleversionnumber");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				SetAttributeValue("timezoneruleversionnumber", value);
			}
		}
		
		/// <summary>
		/// Time zone code that was in use when the record was created.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("utcconversiontimezonecode")]
		public Nullable<int> UtcConversionTimeZoneCode
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return GetAttributeValue<Nullable<int>>("utcconversiontimezonecode");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				SetAttributeValue("utcconversiontimezonecode", value);
			}
		}
		
		/// <summary>
		/// Version Number
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("versionnumber")]
		public Nullable<long> VersionNumber
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return GetAttributeValue<Nullable<long>>("versionnumber");
			}
		}
		
		/// <summary>
		/// 1:N msdyn_msdyn_productcarbonfootprint_msdyn_productfootprintrulemapping_productcarbonfootprint
		/// </summary>
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("msdyn_msdyn_productcarbonfootprint_msdyn_productfootprintrulemapping_productcarbo" +
			"nfootprint")]
		public IEnumerable<Msdyn_ProductFootprintRuleMapping> Msdyn_Msdyn_ProductCarbonFootprint_Msdyn_ProductFootprintRuleMapping_ProductCarbonFootprint
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return GetRelatedEntities<Msdyn_ProductFootprintRuleMapping>("msdyn_msdyn_productcarbonfootprint_msdyn_productfootprintrulemapping_productcarbo" +
						"nfootprint", null);
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				SetRelatedEntities<Msdyn_ProductFootprintRuleMapping>("msdyn_msdyn_productcarbonfootprint_msdyn_productfootprintrulemapping_productcarbo" +
				                                                           "nfootprint", null, value);
			}
		}
		
		/// <summary>
		/// 1:N msdyn_msdyn_sustainabilityproductfootprint_sust
		/// </summary>
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("msdyn_msdyn_sustainabilityproductfootprint_sust")]
		public IEnumerable<Msdyn_SustainabilityProductFootprint> Msdyn_Msdyn_SustainabilityProductFootprint_SuSt
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return GetRelatedEntities<Msdyn_SustainabilityProductFootprint>("msdyn_msdyn_sustainabilityproductfootprint_sust", null);
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				SetRelatedEntities<Msdyn_SustainabilityProductFootprint>("msdyn_msdyn_sustainabilityproductfootprint_sust", null, value);
			}
		}
		
		/// <summary>
		/// N:1 msdyn_msdyn_productcarbonfootprintassurance_msdyn_productcarbonfootprint_productcarbonfootprintassur
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msdyn_productcarbonfootprintassurance")]
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("msdyn_msdyn_productcarbonfootprintassurance_msdyn_productcarbonfootprint_productc" +
			"arbonfootprintassur")]
		public Msdyn_ProductCarbonFootprintAssurance Msdyn_Msdyn_ProductCarbonFootprintAssurance_Msdyn_ProductCarbonFootprint_ProductCarbonFootprintAsSur
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return GetRelatedEntity<Msdyn_ProductCarbonFootprintAssurance>("msdyn_msdyn_productcarbonfootprintassurance_msdyn_productcarbonfootprint_productc" +
						"arbonfootprintassur", null);
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				SetRelatedEntity<Msdyn_ProductCarbonFootprintAssurance>("msdyn_msdyn_productcarbonfootprintassurance_msdyn_productcarbonfootprint_productc" +
				                                                             "arbonfootprintassur", null, value);
			}
		}
		
		/// <summary>
		/// Constructor for populating via LINQ queries given a LINQ anonymous type
		/// <param name="anonymousType">LINQ anonymous type.</param>
		/// </summary>
		[System.Diagnostics.DebuggerNonUserCode()]
		public Msdyn_SustainabilityProductCarbonFootprint(object anonymousType) : 
				this()
		{
            foreach (var p in anonymousType.GetType().GetProperties())
            {
                var value = p.GetValue(anonymousType, null);
                var name = p.Name.ToLower();
            
                if (name.EndsWith("enum") && value.GetType().BaseType == typeof(Enum))
                {
                    value = new Microsoft.Xrm.Sdk.OptionSetValue((int) value);
                    name = name.Remove(name.Length - "enum".Length);
                }
            
                switch (name)
                {
                    case "id":
                        base.Id = (Guid)value;
                        Attributes["msdyn_sustainabilityproductcarbonfootprintid"] = base.Id;
                        break;
                    case "msdyn_sustainabilityproductcarbonfootprintid":
                        var id = (Nullable<Guid>) value;
                        if(id == null){ continue; }
                        base.Id = id.Value;
                        Attributes[name] = base.Id;
                        break;
                    case "formattedvalues":
                        // Add Support for FormattedValues
                        FormattedValues.AddRange((Microsoft.Xrm.Sdk.FormattedValueCollection)value);
                        break;
                    default:
                        Attributes[name] = value;
                        break;
                }
            }
		}
	}
}
#pragma warning restore CS1591
